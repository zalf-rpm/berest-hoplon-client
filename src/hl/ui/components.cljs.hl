(ns ui.components
  (:require-macros [javelin.core :as jm :refer [loop-tpl]]
                   [hoplon.core :as hm :refer []])
  (:require [javelin.core :as j :refer [cell cell=]]
            [hoplon.core :as h :refer [nav img a ul li strong img div button input text span p h3 nav]]
            [de.zalf.berest.client.hoplon.util :as util]
            [de.zalf.berest.client.hoplon.state :as s]
            [util.bootstrap :as ubs]
            [hoplon.twitter.bootstrap :as bs]))

(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:signed-in-as {:lang/de "Eingeloggt als "
                          :lang/en "Signed in as "}
           :username {:lang/de "Nutzername"
                      :lang/en "Username"}
           :user-placeholder {:lang/de "Nutzername"
                              :lang/en "Username"}
           :password {:lang/de "Passwort"
                      :lang/en "Password"}
           :pwd-placeholder {:lang/de "Passwort"
                             :lang/en "Password"}
           :nav-admin {:lang/de "Administration"
                      :lang/en "Administration"}
           :nav-news {:lang/de "Aktuell"
                         :lang/en "Current"}
           :nav-farms {:lang/de "Betriebe"
                       :lang/en "Farms"}
           :nav-weather {:lang/de "Wetterdaten"
                         :lang/en "Weather data"}
           :nav-crops {:lang/de "Fruchtarten"
                       :lang/en "Crops"}
           :nav-soils {:lang/de "BÃ¶den"
                       :lang/en "Soils"}
           :nav-archive {:lang/de "Archiv"
                         :lang/en "Archive"}
           :nav-settings {:lang/de "Einstellungen"
                          :lang/en "Settings"}
           :nav-bersim {:lang/de "IRRIGAMA.SIM"
                        :lang/en "BERSIM"}

           :farm {:lang/de "Betrieb:"
                  :lang/en "Farm:"}

           :plot {:lang/de "Schlag:"
                  :lang/en "Plot:"}

           :plot-annual {:lang/de "Jahr:"
                         :lang/en "Year:"}

           :weather-station {:lang/de "Wetterstation:"
                             :lang/en "Weather-station:"}

           :weather-year {:lang/de "Jahr(e):"
                          :lang/en "Year(s):"}

           :crop {:lang/de "Fruchtart:"
                  :lang/en "Crop:"}
           }
          [element (or lang :lang/de)] "UNKNOWN element"))


(defn error-pane
  []
  (div
    :id "error"
    :click s/clear-error!
    :slide-toggle s/error
    (text "~(ex-message s/error)")))

(defn loading-pane
  []
  (div
    :id "loading"
    :fade-toggle s/loading?
    "loading..."))


(defn top-nav-bar
  [page-name-label]
  (ubs/navbar
    :class "navbar navbar-default navbar-fixed-top"
    ;:role "navigation"
    (div
      :class "container-fluid"

      (div
        :class "navbar-header"
        (button
          :type "button"
          :class "navbar-toggle collapsed"
          :data-toggle "collapse"
          :data-target ".navbar-collapse"
          (span :class "sr-only" "Toggle navigation")
          (span :class "icon-bar")
          (span :class "icon-bar")
          (span :class "icon-bar"))
        (span
          :class "navbar-brand"
          :style "padding-top: 6px"
          (img
            :style "height:40px" #_"clear: both;"
            :src "irrigama-logo.png"
            :alt "Irrigama-Logo"))
        #_(span
          :class "navbar-brand"
          :style "padding-top: 6px"
          (a
            :href "http://www.fbm-ev.de"
            (img
              :style "height:40px" #_"clear: both"
              :src "fbm-logo.png"
              :alt "FBM-Logo")))
        (span
            :class "navbar-brand"
            :style "padding-top: 6px"
            (a
              :href "http://www.zalf.de"
              (img
                :style "height:40px" #_"clear: both"
                :src "zalf-logo.png"
                :alt "ZALF-Logo")))
        (span
          :class "navbar-text"
          :style "margin-top: 8px; margin-bottom: 8px"
          (a
            :href "#/farms"
            (span
              :toggle s/show-content?
              :style "vertical-align: middle; font-size:24px; font-weight:bold" page-name-label))))

      (div
        :class "collapse navbar-collapse"
        (ul
          :toggle s/logged-in?
          :class "nav navbar-nav"
          (li
            :class (cell= {:active (= s/route "#/farms")})
            (a
              :href (cell= (str "#/farms?" s/route-params-str))
              (cell= (vocab :nav-farms s/lang))))
          (li
            :class (cell= {:active (= s/route "#/weather")})
            (a
              :href (cell= (str "#/weather?" s/route-params-str))
              (cell= (vocab :nav-weather s/lang))))
          (li
            :class (cell= {:active (= s/route "#/crops")})
            (a
              :href (cell= (str "#/crops?" s/route-params-str))
              (cell= (vocab :nav-crops s/lang))))
          (li
            :class (cell= {:active (= s/route "#/settings")})
            (a
              :href (cell= (str "#/settings?" s/route-params-str))
              (cell= (vocab :nav-settings s/lang))))
          (li
            :toggle s/admin-logged-in?
            :class (cell= {:active (= s/route "#/admin")})
            (a
              :href (cell= (str "#/admin?" s/route-params-str))
              (cell= (vocab :nav-admin s/lang)))))
        (div
          :toggle s/logged-in?
          :class "navbar-right"
          (p
            :class "navbar-text"
            :style "margin-top: 0px; margin-bottom: 0px;"

            (text "~(vocab :signed-in-as s/lang)")
            (strong (text "~(:user/full-name s/user) "))
            (button
              :class "btn btn-default navbar-btn"
              :click #(do
                       (s/logout!)
                       (reset! s/static-state nil)
                       (s/clear-route+params))
              "Logout"))))
      (div
        :class "row"
        :toggle s/logged-in?
        :style "background-color: #e7e7e7; margin-bottom: 0px;"

        (div
          :toggle (cell= (= s/route "#/farms"))
          :class "breadcrumbs-padding"
          ;:style "padding: 3px 15px"

          (span
            :toggle (cell= (:farm s/breadcrumbs))
            :click #(some-> "farm-details-panel" util/by-id .scrollIntoView)
            (text "~(vocab :farm s/lang) ~(:farm s/breadcrumbs) "))

          (span
            :toggle (cell= (:plot s/breadcrumbs))
            :class "glyphicon glyphicon-arrow-right")

          (span
            :toggle (cell= (:plot s/breadcrumbs))
            :click #(some-> "plot-details-panel" util/by-id .scrollIntoView)
            (text " ~(vocab :plot s/lang) ~(:plot s/breadcrumbs) "))

          (span
            :toggle (cell= (:plot-annual s/breadcrumbs))
            :class "glyphicon glyphicon-arrow-right")

          (span
            :toggle (cell= (:plot-annual s/breadcrumbs))
            :click #(some-> "plot-section-table" util/by-id .scrollIntoView)
            (text " ~(vocab :plot-annual s/lang) ~(:plot-annual s/breadcrumbs)")))

        (div
          :toggle (cell= (= s/route "#/weather"))
          :class "breadcrumbs-padding"
          ;:style "padding: 3px 15px"

          (span
            :toggle (cell= (:weather-station s/breadcrumbs))
            :click #(some-> "weather-data-chart" util/by-id .scrollIntoView)
            (text "~(vocab :weather-station s/lang) ~(:weather-station s/breadcrumbs) "))

          (span
            :toggle (cell= (:weather-year s/breadcrumbs))
            :class "glyphicon glyphicon-arrow-right")

          (span
            :toggle (cell= (:weather-year s/breadcrumbs))
            (text " ~(vocab :weather-year s/lang) ~(:weather-year s/breadcrumbs) ")))

        (div
          :toggle (cell= (= s/route "#/crops"))
          :class "breadcrumbs-padding"
          ;:style "padding: 3px 15px"

          (span
            :toggle (cell= (:crop s/breadcrumbs))
            :click #(some-> "crop-chart" util/by-id .scrollIntoView)
            (text "~(vocab :crop s/lang) ~(:crop s/breadcrumbs) ")))

        ))))

(defn login-pane
  []
  (let [user (cell nil)
        pwd (cell "none")]
    (div
      (div
        :id "login-pane"
        :class "center"
        :toggle s/show-login?
        :style "width:80%;"

        (bs/form-horizontal
          :id "login"
          :submit #(when (and @user @pwd)
                    (s/login! @user @pwd)
                    (s/set-route "#/farms")
                    (reset! user nil)
                    (reset! pwd nil)
                    #_(do! (util/by-id user-id) :value "")
                    #_(do! (util/by-id pwd-id) :value ""))

          (button :toggle false)

          (bs/form-group
            (div
              :col {:xs 3}
              (input
                :class "form-control"
                :placeholder (cell= (vocab :user-placeholder s/lang))
                :type "text"
                :value user
                :change #(reset! user @%)
                :autofocus "autofocus"))

            (div
              :col {:xs 3}
              :class "col-xs-offset-1"
              #_(input
                :class "form-control"
                :placeholder (cell= (vocab :pwd-placeholder s/lang))
                :type "password"
                :value pwd
                :change #(reset! pwd @%)))

            (div
              :col {:xs 4}
              :class "col-xs-offset-1"
              (button
                :class "form-control btn btn-primary"
                :type "submit" "Login"))))

        (div
          :class "row"

          (img
            :col {:xs 12}
            :class "img-responsive"
            :src "webberest-logo-small.png"))))))


(defelem safe-delete-button
         [{:keys [action! value small-button?]
           :as attrs} kids]
         ((let [checked? (cell false)
                checked-id (gensym)]
            (div
              :class "input-group"
              (input
                :type "button"
                :class (cell= {:form-control true
                               :btn true
                               :btn-danger true
                               :btn-block true
                               :btn-sm (if small-button? small-button? false)
                               :disabled (not checked?)})
                :click #(do
                         (reset! checked? false)
                         (action!))
                :value value)
              (span

                :class "input-group-addon"
                (input
                  :id checked-id
                  :type "checkbox"
                  :value checked?
                  :change #(reset! checked? @%)))))
          (dissoc attrs :action! :value :small-button?) kids))

(defelem hover-activate-wrapper
         [{:keys [action!]
           :as attrs} [elem]]
         (let [hover? (cell false)]
              ((elem
                 :mouseenter #(reset! hover? true)
                 :mouseleave #(reset! hover? false)
                 :class (cell= {:bg-warning hover?})
                 :click #(action!)) (dissoc attrs :action!))))

(defelem hover-toggle-panel
         [{:keys [action! toggle-cell]
           :as attrs} [header & body]]
         (let [hover? (cell false)
               body-visible? (if toggle-cell toggle-cell (cell false))]
           ((div
             :class (cell= {:panel true
                            :panel-default (and (not hover?) (not body-visible?))
                            :panel-warning (and hover? (not body-visible?))
                            :panel-success body-visible?})
             (div
               :class "panel-heading"
               :mouseenter #(reset! hover? true)
               :mouseleave #(reset! hover? false)
               :click #(do
                        (swap! body-visible? not)
                        (when action!
                          (action!)))
               (header))

             (div
               :class "panel-body"
               body))
            (dissoc attrs :action! :toggle-cell))))